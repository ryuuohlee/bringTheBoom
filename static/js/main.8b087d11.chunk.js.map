{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","require","config","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","process","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b087d11.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: ''\n    }\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    }\n    else {\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n    }\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track)\n  }\n\n  render() {\n    return(\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    )\n  }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n         {\n           this.props.tracks.map(track => {\n             return <Track track={track}\n                           key={track.id}\n                           onAdd={this.props.onAdd}\n                           onRemove={this.props.onRemove}\n                           isRemoval={this.props.isRemoval} />\n           })\n          }\n      </div>\n    )\n  }\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList.js';\n\nclass SearchResults extends React.Component {\n  render() {\n    return(\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults}\n                   onAdd={this.props.onAdd}\n                   isRemoval={false} />\n      </div>\n    )\n  }\n}\n\nexport default SearchResults;","import React from 'react';\nimport '../Playlist/Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return(\n      <div className=\"Playlist\">\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\n        <TrackList tracks={this.props.playlistTracks}\n                   onRemove={this.props.onRemove}\n                   isRemoval={true}\n                   />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    )\n  }\n}\n\nexport default Playlist;","require('dotenv').config();\n\nconst clientId = process.env.REACT_APP_CLIENT_ID;\nconst redirectUri = process.env.REACT_APP_URI;\nlet accessToken;\n\nconst Spotify = {\n getAccessToken() {\n   if(accessToken) {\n     return accessToken;\n   }\n   //check for accessToken match\n   const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n   const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n   if (accessTokenMatch && expiresInMatch) {\n     accessToken = accessTokenMatch[1];\n     const expiresIn = Number(expiresInMatch[1]);\n\n     //This clears the parameters, allowing us to grab a new access token when it expires\n     window.setTimeout(() => accessToken = '', expiresIn * 1000);\n     window.history.pushState('Access Token', null, '/');\n     return accessToken;\n   }\n   else {\n     const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n     window.location = accessUrl;\n   }\n },\n search(term) {\n   const accessToken = Spotify.getAccessToken();\n   return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n     headers: {\n       Authorization: `Bearer ${accessToken}`\n     }\n   }).then(response => {\n     return response.json();\n   }).then(jsonResponse => {\n     if(!jsonResponse.tracks) {\n       return [];\n     }\n     return jsonResponse.tracks.items.map(track => ({\n       id: track.id,\n       name: track.name,\n       artists: track.artists[0].name,\n       album: track.album.name,\n       uri: track.uri\n     }))\n   })\n },\n savePlaylist(name, trackUris) {\n   if(!name || !trackUris.length) {\n     return;\n   }\n\n   const accessToken = Spotify.getAccessToken();\n   const headers = { Authorization: `Bearer ${accessToken}` };\n   let userId;\n\n   return fetch('https://api.spotify.com/v1/me', { headers: headers }\n   ).then(response => response.json()\n   ).then(jsonResponse => {\n     userId = jsonResponse.id;\n     return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n     {\n       headers: headers,\n       method: 'POST',\n       body: JSON.stringify({ name: name })\n     }).then(response => response.json()\n     ).then(jsonResponse => {\n       const playlistId = jsonResponse.id;\n       return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n         headers: headers,\n         method: 'POST',\n         body: JSON.stringify({ uris: trackUris })\n       })\n     })\n   });\n }\n}\n\nexport default Spotify;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state ={\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                     playlistTracks={this.state.playlistTracks}\n                     onRemove={this.removeTrack}\n                     onNameChange={this.updatePlaylistName}\n                     onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}